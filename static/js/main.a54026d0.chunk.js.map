{"version":3,"sources":["Components/FeedbackOptions/FeedBackOptions.jsx","Components/Statistics/Statistics.jsx","Components/Section/Section.jsx","Components/Notification/Notification.jsx","App.js","index.js","Components/FeedbackOptions/Buttons.module.css","Components/Statistics/Statistics.module.css"],"names":["FeedBackOptions","options","onLeaveFeedback","Object","keys","map","option","className","s","buttons","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","statistics","Section","title","children","Notification","message","App","state","handleIncrement","name","setState","prevState","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6SA2BeA,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGC,OAAOC,KAAKH,GAASI,KAAI,SAACC,GAAD,OACxB,wBACEC,UAAWC,IAAEC,QACbC,KAAK,SACLJ,OAAQA,EAERK,QAAS,kBAAMT,EAAgBI,IALjC,SAOGA,GAHIA,S,gBCYAM,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKV,UAAWC,IAAEU,WAAlB,UACE,0CAAaL,KACb,6CAAgBC,KAChB,0CAAaC,KACb,2CAAcC,KACd,yDAA4BC,SCMnBE,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCIQC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,+BAAOA,KCGKC,E,4MACnBC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPW,gBAAkB,SAACC,GACjB,EAAKC,UAAS,SAACC,GAAD,sBACXF,EAAOE,EAAUF,GAAQ,O,EAI9BX,MAAQ,WACN,OAAO,EAAKS,MAAMZ,KAAO,EAAKY,MAAMV,IAAM,EAAKU,MAAMX,S,EAGvDG,mBAAqB,WACnB,IAAMD,EAAQ,EAAKA,QACnB,OAAOc,KAAKC,MAAyB,IAAlB,EAAKN,MAAMZ,KAAcG,I,4CAG9C,WACE,OACE,qCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACEnB,QAAS+B,KAAKP,MACdvB,gBAAiB8B,KAAKN,oBAG1B,cAAC,EAAD,CAASN,MAAM,aAAf,SACGY,KAAKhB,QACJ,cAAC,EAAD,CACEH,KAAMmB,KAAKP,MAAMZ,KACjBC,QAASkB,KAAKP,MAAMX,QACpBC,IAAKiB,KAAKP,MAAMV,IAChBC,MAAOgB,KAAKhB,QACZC,mBAAoBe,KAAKf,uBAG3B,cAAC,EAAD,CAAcM,QAAQ,+B,GAzCDU,aCDjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,QAAU,2B,kBCA5BD,EAAOC,QAAU,CAAC,WAAa,kC","file":"static/js/main.a54026d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Buttons.module.css\";\r\n\r\nconst FeedBackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {Object.keys(options).map((option) => (\r\n        <button\r\n          className={s.buttons}\r\n          type=\"button\"\r\n          option={option}\r\n          key={option}\r\n          onClick={() => onLeaveFeedback(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedBackOptions.propTypes = {\r\n  options: PropTypes.object,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedBackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div className={s.statistics}>\r\n      <span>Good: {good}</span>\r\n      <span>Neutral: {neutral}</span>\r\n      <span> Bad: {bad}</span>\r\n      <span>Total: {total}</span>\r\n      <span>Positive Percentage: {positivePercentage}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <span>{message}</span>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport FeedBackOptions from \"./Components/FeedbackOptions/FeedBackOptions\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport Section from \"./Components/Section/Section\";\nimport Notification from \"./Components/Notification/Notification\";\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = (name) => {\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  total = () => {\n    return this.state.good + this.state.bad + this.state.neutral;\n  };\n\n  positivePercentage = () => {\n    const total = this.total();\n    return Math.round((this.state.good * 100) / total);\n  };\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedBackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleIncrement}\n          ></FeedBackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {this.total() ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.total()}\n              positivePercentage={this.positivePercentage()}\n            ></Statistics>\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__2pada\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__3T9jt\"};"],"sourceRoot":""}